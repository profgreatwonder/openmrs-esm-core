name: OpenMRS CI

on:
  workflow_dispatch: # temporary, for debugging
  push:
    branches: [main, bug-fixes, release]  # All branches trigger on push
  pull_request:
    branches: [main, bug-fixes, release]  # All branches trigger on PR
  release:
    types:
      - created

env:
  TURBO_API: 'http://127.0.0.1:9080'
  TURBO_TOKEN: 'turbo-token'
  TURBO_TEAM: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read

    # SIMPLIFIED: Run for ALL events except GitHub releases
    # This means build will run for:
    # - All PRs to any branch (main, bug-fixes, release)
    # - All pushes to any branch (main, bug-fixes, release)
    # - Manual workflow dispatch
    if: ${{ github.event_name != 'release' }}

    steps:
      - uses: actions/checkout@v4
        # PURPOSE: Downloads the repository code at the specific commit that triggered the workflow
        
      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          registry-url: "https://registry.npmjs.org"  # Configure npm registry for publishing
          node-version: 20  # Use Node.js version 20
        # PURPOSE: Installs Node.js and configures npm for potential publishing steps

      - name: üíæ Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'  # Cache all node_modules directories in the monorepo
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}  # Cache key based on OS and yarn.lock hash
        # PURPOSE: Speeds up builds by caching installed dependencies between runs

      - name: üì¶ Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'  # Only run if cache miss occurred
        run: yarn install --immutable
        # PURPOSE: Install dependencies only when cache is not available
        # --immutable ensures yarn.lock is not modified during CI

      - name: üöÄ Setup local cache server for Turborepo
        uses: felixmosh/turborepo-gh-artifacts@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for accessing artifacts
          server-token: ${{ env.TURBO_TOKEN }}  # Custom token for Turborepo server
        # PURPOSE: Sets up Turborepo remote caching using GitHub artifacts for faster builds

      - name: üèóÔ∏è Run build
        run: yarn turbo run build --color --concurrency=5
        # PURPOSE: Build all packages in the monorepo
        # --color: Enable colored terminal output
        # --concurrency=5: Run up to 5 build tasks in parallel

      - name: üîç Run lint, tests and typecheck code
        run: yarn run verify --concurrency=5
        # PURPOSE: Run code quality checks (linting, testing, type checking)
        # Ensures code meets quality standards before proceeding

  pre_release:
    runs-on: ubuntu-latest
    needs: build  # Only run after build job completes successfully

    # SIMPLIFIED: Run for ALL non-release events
    # This means pre_release will run for:
    # - All PRs to any branch (main, bug-fixes, release) - will build/test but NOT publish
    # - All pushes to any branch (main, bug-fixes, release) - will build/test AND publish
    # - Manual workflow dispatch
    # Only skip for actual GitHub release events
    if: ${{ github.event_name != 'release' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for proper versioning
          fetch-tags: true  # Fetch all git tags for version calculations
        # PURPOSE: Get complete repository history needed for semantic versioning

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          registry-url: "https://registry.npmjs.org"
          node-version: 20
        # PURPOSE: Same as build job - setup Node.js environment

      - name: üíæ Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
        # PURPOSE: Reuse cached dependencies from build job

      - name: üì¶ Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable
        # PURPOSE: Install dependencies if not cached

      - name: üöÄ Setup local cache server for Turborepo
        uses: felixmosh/turborepo-gh-artifacts@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          server-token: ${{ env.TURBO_TOKEN }}
        # PURPOSE: Setup Turborepo caching for faster builds

      - name: üîÑ Setup git configuration and fetch all branches
        run: |
          git config --global user.email "info@openmrs.org"
          git config --global user.name "OpenMRS CI"
          git fetch --all --tags
          git branch -a
        # PURPOSE: Configure git for automated commits and ensure all branches/tags are available

      - name: üè∑Ô∏è Version
        run: |
          # Create a temporary branch reference to avoid git errors during versioning
          git branch temp-backup || true
          # Update version in all workspace packages (except core package)
          # Format: current_version + 1 patch + "-pre." + GitHub run number
          # Example: 1.2.3 becomes 1.2.4-pre.123
          yarn workspaces foreach --worktree --topological --exclude @openmrs/esm-core version "$(node -e "console.log(require('semver').inc(require('./package.json').version, 'patch'))")-pre.${{ github.run_number }}"
        # PURPOSE: Automatically increment package versions for pre-release
        # This runs for ALL branches now, not just specific ones

      - name: üèóÔ∏è Build
        run: yarn turbo run build --color --concurrency=5
        # PURPOSE: Rebuild packages with updated version numbers

      - name: üìù Commit version changes
        # CONDITIONAL: Only commit changes for actual pushes, not for PRs
        if: ${{ github.event_name == 'push' }}
        run: git add . && git commit -m "Prerelease version" --no-verify
        # PURPOSE: Save version changes to git history
        # --no-verify: Skip git hooks to avoid conflicts in CI
        # This now applies to ALL branches on push events

      - name: üöÄ Pre-release
        # CONDITIONAL: Only publish packages for actual pushes, not for PRs
        if: ${{ github.event_name == 'push' }}
        run: yarn config set npmAuthToken "${NODE_AUTH_TOKEN}" && yarn run ci:publish-next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        # PURPOSE: Publish pre-release packages to npm with "next" tag
        # For PRs: Skip publishing (just validate that build works)
        # For pushes: Actually publish the packages
        # This now applies to ALL branches (main, bug-fixes, AND release)

      - name: üì§ Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ github.event_name }}-${{ github.run_number }}
          path: |
            packages/**/dist
        # PURPOSE: Save build artifacts for download/inspection
        # Useful for debugging and manual testing

  release:
    runs-on: ubuntu-latest
    needs: build  # Ensure build passes before attempting release

    # CONDITION: Only run for official GitHub release events
    if: ${{ github.event_name == 'release' }}

    steps:
      - uses: actions/checkout@v4
        # PURPOSE: Get the release tag/commit code

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          registry-url: "https://registry.npmjs.org"
          node-version: 20
        # PURPOSE: Setup Node.js for release build and publishing

      - name: üíæ Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
        # PURPOSE: Use cached dependencies for faster release builds

      - name: üì¶ Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable
        # PURPOSE: Install dependencies for release build

      - name: üèóÔ∏è Build
        run: yarn turbo run build --color --concurrency=5
        # PURPOSE: Build packages for official release (using version from git tag)

      - name: üöÄ Publish
        run: yarn config set npmAuthToken "${NODE_AUTH_TOKEN}" && yarn run ci:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        # PURPOSE: Publish official release to npm with "latest" tag
        # Different from pre-release: uses "latest" tag instead of "next"

  deploy_app_shell:
    runs-on: ubuntu-latest
    needs: pre_release  # Only run after successful pre-release

    # SIMPLIFIED: Run for ALL push events to ANY branch
    # This means deploy_app_shell will now trigger for:
    # - Pushes to main branch
    # - Pushes to bug-fixes branch  
    # - Pushes to release branch
    # Will NOT run for PRs (which is correct - PRs shouldn't trigger deployments)
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: üöÄ Trigger RefApp Build
        uses: fjogeleit/http-request-action@v1
        continue-on-error: true  # Don't fail the entire workflow if deployment trigger fails
        with:
          url: https://ci.openmrs.org/rest/api/latest/queue/O3-BF  # Bamboo CI API endpoint
          method: "POST"  # HTTP POST request to trigger build
          customHeaders: '{ "Authorization": "Bearer ${{ secrets.BAMBOO_TOKEN }}" }'  # Authentication header
        # PURPOSE: Automatically trigger deployment in external Bamboo CI system
        # - This happens after successful pre-release publishing
        # - NOW triggers for ALL branches (main, bug-fixes, AND release) on push
        # - The "O3-BF" appears to be the Bamboo build plan identifier
        # - continue-on-error ensures workflow doesn't fail if Bamboo is unavailable
